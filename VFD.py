import time
import serial
import pigpio
import numpy as np

ser = serial.Serial(
        port='/dev/ttyS0', #Replace ttyS0 with ttyAM0 for Pi1,Pi2,Pi0
        baudrate = 9600,
        parity=serial.PARITY_NONE,
        stopbits=serial.STOPBITS_ONE,
        bytesize=serial.EIGHTBITS,
        timeout=1
)

crcTable = np.array([0X0000, 0XC0C1, 0XC181, 0X0140, 0XC301, 0X03C0, 0X0280, 0XC241,
            0XC601, 0X06C0, 0X0780, 0XC741, 0X0500, 0XC5C1, 0XC481, 0X0440,
            0XCC01, 0X0CC0, 0X0D80, 0XCD41, 0X0F00, 0XCFC1, 0XCE81, 0X0E40,
            0X0A00, 0XCAC1, 0XCB81, 0X0B40, 0XC901, 0X09C0, 0X0880, 0XC841,
            0XD801, 0X18C0, 0X1980, 0XD941, 0X1B00, 0XDBC1, 0XDA81, 0X1A40,
            0X1E00, 0XDEC1, 0XDF81, 0X1F40, 0XDD01, 0X1DC0, 0X1C80, 0XDC41,
            0X1400, 0XD4C1, 0XD581, 0X1540, 0XD701, 0X17C0, 0X1680, 0XD641,
            0XD201, 0X12C0, 0X1380, 0XD341, 0X1100, 0XD1C1, 0XD081, 0X1040,
            0XF001, 0X30C0, 0X3180, 0XF141, 0X3300, 0XF3C1, 0XF281, 0X3240,
            0X3600, 0XF6C1, 0XF781, 0X3740, 0XF501, 0X35C0, 0X3480, 0XF441,
            0X3C00, 0XFCC1, 0XFD81, 0X3D40, 0XFF01, 0X3FC0, 0X3E80, 0XFE41,
            0XFA01, 0X3AC0, 0X3B80, 0XFB41, 0X3900, 0XF9C1, 0XF881, 0X3840,
            0X2800, 0XE8C1, 0XE981, 0X2940, 0XEB01, 0X2BC0, 0X2A80, 0XEA41,
            0XEE01, 0X2EC0, 0X2F80, 0XEF41, 0X2D00, 0XEDC1, 0XEC81, 0X2C40,
            0XE401, 0X24C0, 0X2580, 0XE541, 0X2700, 0XE7C1, 0XE681, 0X2640,
            0X2200, 0XE2C1, 0XE381, 0X2340, 0XE101, 0X21C0, 0X2080, 0XE041,
            0XA001, 0X60C0, 0X6180, 0XA141, 0X6300, 0XA3C1, 0XA281, 0X6240,
            0X6600, 0XA6C1, 0XA781, 0X6740, 0XA501, 0X65C0, 0X6480, 0XA441,
            0X6C00, 0XACC1, 0XAD81, 0X6D40, 0XAF01, 0X6FC0, 0X6E80, 0XAE41,
            0XAA01, 0X6AC0, 0X6B80, 0XAB41, 0X6900, 0XA9C1, 0XA881, 0X6840,
            0X7800, 0XB8C1, 0XB981, 0X7940, 0XBB01, 0X7BC0, 0X7A80, 0XBA41,
            0XBE01, 0X7EC0, 0X7F80, 0XBF41, 0X7D00, 0XBDC1, 0XBC81, 0X7C40,
            0XB401, 0X74C0, 0X7580, 0XB541, 0X7700, 0XB7C1, 0XB681, 0X7640,
            0X7200, 0XB2C1, 0XB381, 0X7340, 0XB101, 0X71C0, 0X7080, 0XB041,
            0X5000, 0X90C1, 0X9181, 0X5140, 0X9301, 0X53C0, 0X5280, 0X9241,
            0X9601, 0X56C0, 0X5780, 0X9741, 0X5500, 0X95C1, 0X9481, 0X5440,
            0X9C01, 0X5CC0, 0X5D80, 0X9D41, 0X5F00, 0X9FC1, 0X9E81, 0X5E40,
            0X5A00, 0X9AC1, 0X9B81, 0X5B40, 0X9901, 0X59C0, 0X5880, 0X9841,
            0X8801, 0X48C0, 0X4980, 0X8941, 0X4B00, 0X8BC1, 0X8A81, 0X4A40,
            0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
            0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
            0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040],dtype=np.uint16)

def calculateCRC(data):
    crc = np.array([256*256-1],dtype=np.uint16)
    for b in data:
        tableIndex = (b^crc[0]).astype(np.uint8)
        crc[0] = crc[0]>>8
        crc[0] = crc[0]^crcTable[tableIndex]
        #print(b,tableIndex,crc[0])
    return np.frombuffer(crc.tobytes(), dtype=np.uint8)
    
def speed_2_bytes(speed):
    speed_100 = np.clip(speed*100,0,65536).astype(np.uint16)
    return np.flip(np.frombuffer(speed_100.tobytes(), dtype=np.uint8))

def speed_command(speed):
    cmd = np.array([0x01, 0x05, 0x03],dtype=np.uint8)
    cmd = np.hstack((cmd, speed_2_bytes(speed),np.array([0],dtype=np.uint8)))
    return np.hstack((cmd, calculateCRC(cmd)))
#----------------------------------------
#test
#----------------------------------------
speed=[
[0x01, 0x05, 0x03, 0x02, 0x58, 0x00, 0x57, 0x8E ], [0x01, 0x05, 0x03, 0x02, 0xBC, 0x00, 0x1C, 0x8E ],
[0x01, 0x05, 0x03, 0x03, 0x20, 0x00, 0x24, 0x4E ], [0x01, 0x05, 0x03, 0x03, 0x84, 0x00, 0x5E, 0x8E ],
[0x01, 0x05, 0x03, 0x03, 0xE8, 0x00, 0x73, 0x8E ], [0x01, 0x05, 0x03, 0x04, 0x4C, 0x00, 0xB8, 0x8F ],
[0x01, 0x05, 0x03, 0x04, 0xB0, 0x00, 0xF9, 0x8F ], [0x01, 0x05, 0x03, 0x05, 0x14, 0x00, 0xD2, 0x8F ],
[0x01, 0x05, 0x03, 0x05, 0x78, 0x00, 0xFF, 0x8F ], [0x01, 0x05, 0x03, 0x05, 0xDC, 0x00, 0x85, 0x4F ],
[0x01, 0x05, 0x03, 0x06, 0x40, 0x00, 0x1C, 0x4F ], [0x01, 0x05, 0x03, 0x06, 0xA4, 0x00, 0x57, 0x4F ],
[0x01, 0x05, 0x03, 0x07, 0x08, 0x00, 0x7B, 0x8F ], [0x01, 0x05, 0x03, 0x07, 0x6C, 0x00, 0x51, 0x4F ],
[0x01, 0x05, 0x03, 0x07, 0xD0, 0x00, 0x21, 0x8F ], [0x01, 0x05, 0x03, 0x08, 0x34, 0x00, 0x5A, 0x8C ],
[0x01, 0x05, 0x03, 0x08, 0x98, 0x00, 0x27, 0x8C ], [0x01, 0x05, 0x03, 0x08, 0xFC, 0x00, 0x0D, 0x4C ],
[0x01, 0x05, 0x03, 0x09, 0x60, 0x00, 0x35, 0x8C ], [0x01, 0x05, 0x03, 0x09, 0xC4, 0x00, 0x4F, 0x4C ],
[0x01, 0x05, 0x03, 0x0A, 0x28, 0x00, 0xF3, 0x8C ], [0x01, 0x05, 0x03, 0x0A, 0x8C, 0x00, 0x89, 0x4C ],
[0x01, 0x05, 0x03, 0x0A, 0xF0, 0x00, 0xA9, 0x8C ], [0x01, 0x05, 0x03, 0x0B, 0x53, 0x00, 0x80, 0xBC ],
[0x01, 0x05, 0x03, 0x0B, 0xB8, 0x00, 0xCE, 0x4C ], [0x01, 0x05, 0x03, 0x0C, 0x1C, 0x00, 0x05, 0x4D ],
[0x01, 0x05, 0x03, 0x0C, 0x80, 0x00, 0x6C, 0x4D ], [0x01, 0x05, 0x03, 0x0C, 0xE4, 0x00, 0x46, 0x8D ],
[0x01, 0x05, 0x03, 0x0D, 0x48, 0x00, 0x6A, 0x4D ], [0x01, 0x05, 0x03, 0x0D, 0xAC, 0x00, 0x21, 0x4D ],
[0x01, 0x05, 0x03, 0x0E, 0x10, 0x00, 0xA1, 0x8D ], [0x01, 0x05, 0x03, 0x0E, 0x74, 0x00, 0x8B, 0x4D ],
[0x01, 0x05, 0x03, 0x0E, 0xD8, 0x00, 0xF6, 0x4D ], [0x01, 0x05, 0x03, 0x0F, 0x3C, 0x00, 0xEC, 0x8D ],
[0x01, 0x05, 0x03, 0x0F, 0xA0, 0x00, 0x85, 0x8D ], [0x01, 0x05, 0x03, 0x10, 0x04, 0x00, 0xCE, 0x8B ],
[0x01, 0x05, 0x03, 0x10, 0x68, 0x00, 0xE3, 0x8B ], [0x01, 0x05, 0x03, 0x10, 0xCC, 0x00, 0x99, 0x4B ],
[0x01, 0x05, 0x03, 0x11, 0x30, 0x00, 0x89, 0x8B ], [0x01, 0x05, 0x03, 0x11, 0x94, 0x00, 0xF3, 0x4B ],
[0x01, 0x05, 0x03, 0x11, 0xF8, 0x00, 0xDE, 0x4B ], [0x01, 0x05, 0x03, 0x12, 0x5C, 0x00, 0x54, 0x8B ],
[0x01, 0x05, 0x03, 0x12, 0xC0, 0x00, 0x3D, 0x8B ], [0x01, 0x05, 0x03, 0x13, 0x24, 0x00, 0x27, 0x4B ],
[0x01, 0x05, 0x03, 0x13, 0x88, 0x00, 0x5A, 0x4B ]]
#
#ii =10;speed_command(6+ii),np.array(speed[ii])

pigpio.exceptions = False
pi1 = pigpio.pi()
DeRe=13
b= pigpio.pi()
pi1.write(DeRe, 0)
def set_speed(speed):#a):
    #############
    b.write(DeRe, 1)
    #cmd=speed[a]
    cmd = speed_command(speed)
    ser.write( bytearray(cmd) )
    #print(cmd,hex)
    #print(bytearray(cmd),hex)
    #for i in range(8):
    #    print(cmd[i],hex)
    time.sleep(0.1)
    pi1.write(DeRe, 0)
    res = None
    #while ser.in_waiting:  # Or: while ser.inWaiting():
    #    res = ser.read()
    return True or (res is not None)
    
def start():
    b.write(DeRe, 1)
    cmd=[0x01, 0x03, 0x01, 0x01, 0x31, 0x88]
    ser.write( bytearray(cmd) )
    time.sleep(0.1)
    pi1.write(DeRe, 0)
    
def stop():
    b.write(DeRe, 1)
    cmd=[0x01, 0x03, 0x01, 0x08, 0xF1, 0x8E]
    ser.write( bytearray(cmd) )
    time.sleep(0.1)
    pi1.write(DeRe, 0)
    
    
if __name__ == '__main__':
    set_speed(6)
    start()
    stop()


